#lang racket/base

(provide (struct-out exp)
         (struct-out ref-e)
         (struct-out int-e)
         (struct-out bool-e)
         (struct-out lam-e)
         (struct-out let-e)
         (struct-out letrec-e)
         (struct-out app-e)
         (struct-out app-values-e)
         (struct-out if-e)
         (struct-out and-e)
         (struct-out or-e)
         (struct-out handle-e)
         (struct-out raise-e)
         (struct-out prim-e))

(struct exp () #:transparent)
(struct ref-e exp (x) #:transparent)
(struct int-e exp (n) #:transparent)
(struct bool-e exp (p) #:transparent)
(struct lam-e exp (xs r e) #:transparent)
(struct let-e exp (xs r e0 e1) #:transparent)
(struct letrec-e exp (xs r e0 e1) #:transparent)
(struct app-e exp (e es) #:transparent)
(struct app-values-e exp (e0 e1) #:transparent)
(struct if-e exp (e0 e1 e2) #:transparent)
(struct and-e exp (e0 e1) #:transparent)
(struct or-e exp (e0 e1) #:transparent)
(struct handle-e exp (x e0 e1) #:transparent)
(struct raise-e exp (e) #:transparent)
(struct prim-e exp (id) #:transparent)
